export const DEFAULT_COUNTERS = [
  {
    type: 'generic',
    label: 'Generic',
  },
  {
    type: 'amount',
    label: 'Amount',
  },
  {
    type: 'p1/p1',
    label: '+1 / +1',
  },
  {
    type: 'm1/m1',
    label: '-1 / -1',
  },
  {
    type: 'shield',
    label: 'Shield',
  },
  {
    type: 'flying',
    label: 'Flying',
  },
  {
    type: 'indestructible',
    label: 'Indestructible',
  },
  {
    type: 'hexproof',
    label: 'Hexproof',
  },
] as const;

export const COUNTERS_WITH_ICONS = [
  'arrow',
  'brick',
  'charge',
  'devotion',
  'doom',
  'echo',
  'flame',
  'flood',
  'fungus',
  'gold',
  'ki',
  'lore',
  'loyalty',
  'mining',
  'muster',
  'pin',
  'scream',
  'slime',
  'time',
  'verse',
  'void',
  'vortex',
  'shield',
  'stun',
];

// Counters taken from DB with this query:
// TODO: first strike, double strike not included in db export
// eslint-disable-next-line max-len
// SELECT DISTINCT substring(oracle_text from '[A-z]{2,}\scounters?'), ARRAY_AGG(oracle_text) FROM cards GROUP BY substring(oracle_text from '[A-z]{2,}\scounters?');

export const ABILITIE_COUNTERS_WITH_ICONS = [
  'deathtouch',
  'devotion',
  'double strike',
  'flying',
  'first strike',
  'haste',
  'hexproof',
  'indestructible',
  'lifelink',
  'menace',
  'reach',
  'training',
  'trample',
  'vigilance',
];

export const ALL_COUNTERS = [
  'Acorn',
  'Aegis',
  'Age',
  'Aim',
  'Arrow',
  'Arrowhead',
  'Awakening',
  'Blaze',
  'Blessing',
  'Blood',
  'Book',
  'Bounty',
  'Bribery',
  'Brick',
  'Burden',
  'Burn',
  'Cage',
  'Carrion',
  'Charge',
  'Chip',
  'Chorus',
  'Coin',
  'Collection',
  'Component',
  'Contested',
  'Corpse',
  'Corruption',
  'Credit',
  'Croak',
  'Crystal',
  'Cube',
  'Currency',
  'Death',
  'Deathtouch',
  'Defense',
  'Delay',
  'Depletion',
  'Despair',
  'Devotion',
  'Discovery',
  'Divinity',
  'Doom',
  'Double Strike',
  'Dream',
  'Echo',
  'Egg',
  'Elixir',
  'Energy',
  'Enlightened',
  'Eon',
  'Eruption',
  'Experience',
  'Exposure',
  'Eyeball',
  'Eyestalk',
  'Fade',
  'Fate',
  'Feather',
  'Fetch',
  'Filibuster',
  'Finality',
  'First Strike',
  'Flame',
  'Flood',
  'Flying',
  'Foreshadow',
  'Fungus',
  'Funk',
  'Fury',
  'Fuse',
  'Gem',
  'Ghostform',
  'Globe',
  'Glyph',
  'Gold',
  'Growth',
  'Hack',
  'Harmony',
  'Haste',
  'Hatchling',
  'Healing',
  'Hexproof',
  'Hit',
  'Hoofprint',
  'Hope',
  'Hour',
  'Hourglass',
  'Hunger',
  'Ice',
  'Incarnation',
  'Indestructible',
  'Infection',
  'Influence',
  'Ingenuity',
  'Intervention',
  'Isolation',
  'Javelin',
  'Ki',
  'Kick',
  'Knickknack',
  'Knowledge',
  'Level',
  'Lifelink',
  'Lore',
  'Loyalty',
  'Luck',
  'Magnet',
  'Manabond',
  'Manifestation',
  'Mannequin',
  'Matrix',
  'May',
  'Menace',
  'Midway',
  'Mine',
  'Mining',
  'Mire',
  'Muster',
  'Net',
  'Night',
  'Oil',
  'Omen',
  'Ore',
  'Page',
  'Pain',
  'Palliation',
  'Paralyzation',
  'Pause',
  'Petal',
  'Petrification',
  'Phylactery',
  'Phyresis',
  'Pin',
  'Plague',
  'Plot',
  'Point',
  'Poison',
  'Polyp',
  'Pressure',
  'Prey',
  'Pupa',
  'Quest',
  'Rad',
  'Reach',
  'Rejection',
  'Reprieve',
  'Ribbon',
  'Rope',
  'Scream',
  'Scroll',
  'Shadow',
  'Shell',
  'Shield',
  'Shoe',
  'Shred',
  'Silver',
  'Skewer',
  'Sleep',
  'Sleight',
  'Slime',
  'Slumber',
  'Soot',
  'Soul',
  'Spark',
  'Spell',
  'Spite',
  'Spore',
  'Stash',
  'Storage',
  'Story',
  'Strife',
  'Strike',
  'Study',
  'Stun',
  'Suspect',
  'Takeover',
  'Task',
  'Theft',
  'Ticket',
  'Tide',
  'Time',
  'Tower',
  'Training',
  'Trample',
  'Trap',
  'Treasure',
  'Unity',
  'Valor',
  'Velocity',
  'Verse',
  'Vigilance',
  'Vitality',
  'Void',
  'Vortex',
  'Vow',
  'Wage',
  'Winch',
  'Wind',
  'Wish',
  '+0 / +1',
  '+0 / +2',
  '+1 / +0',
  '+1 / +2',
  '+2 / +2',
  '-0 / -1',
  '-0 / -2',
  '-1 / -0',
  '-2 / -1',
  '-2 / -2',
];

export const getIconType = (counter: string) => {
  if (COUNTERS_WITH_ICONS.includes(counter.toLowerCase())) {
    return 'counter';
  }
  if (ABILITIE_COUNTERS_WITH_ICONS.includes(counter.toLowerCase())) {
    return 'ability';
  }
  return null;
};

export const getCountersLabel = (type: string) => {
  const capitalizeType = () => type.charAt(0).toUpperCase() + type.slice(1);

  return (
    DEFAULT_COUNTERS.find((counter) => counter.type === type)?.label || capitalizeType()
  );
};
