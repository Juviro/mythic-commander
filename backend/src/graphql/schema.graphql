enum Visibility {
  private
  hidden
  public
}
enum DeckStatus {
  active
  draft
  archived
}

################################# Card #################################

type Card {
  # Core card fields
  id: String!
  set: String!
  name: String!
  image_uris: ImageUris
  card_faces: [CardFace!]
  priceUsd: Float!
  priceEur: Float!
  prices: Prices!
  rarity: String!
  oracle_text: String
  scryfall_uri: String
  cmc: Float!
  legalities: Legalities!
  purchase_uris: PurchaseUris!
  oracle_id: String!
  rulings_uri: String!
  type_line: String!
  colors: [String]
  color_identity: [String]
  set_name: String!
  mana_cost: String
  foil: Boolean!
  nonfoil: Boolean!
  isTwoFaced: Boolean!
  primary_variant: String
  collector_number: String!
  produced_mana: [String!]
  game_changer: Boolean

  # Additional card fields
  imgKey: String!
  amountOwned: Int!
  amountOwnedFoil: Int!
  partner: CommanderPartners
  canBeCommander: Boolean!
  isModalDfcLand: Boolean!

  oracleCard: OracleCard!
  relatedCards: [Card!]
}

type OracleCard {
  _id: String!
  sumPriceUsd: Float
  sumPriceEur: Float
  minPriceUsd: Float!
  minPriceEur: Float!
  allSets: [Card!]!

  scryfallTags: [ScryfallTag!]!

  owned: Boolean!
  totalAmount: Int!
  reserved: Boolean!

  isCommanderLegal: Boolean!
  primaryTypes: [String!]!
  subTypes: [String!]!

  containingDecks: [Deck!]!
  containingWantsLists: [ContainingList!]!
  friendsCollection: [FriendsCollection!]!
}

type ScryfallTag {
  id: String!
  name: String!
  slug: String!
  description: String
  taggingCount: Int!
}

type FriendsCollection {
  userId: String!
  username: String!
  amountTotal: Int!
  sets: [FriendsCollectionSet!]!
}

type FriendsCollectionSet {
  set: String!
  id: String!
  set_name: String!
  amount: Int!
  amountFoil: Int!
}

type ContainingListDeck {
  imgSrc: String
}

type ContainingList {
  id: String!
  name: String!
  amount: Int!
  deck: ContainingListDeck
}

type CommanderPartners {
  partnerType: String
  partnersWith: String
}

type PurchaseUris {
  tcgplayer: String
  cardmarket: String
}

type Prices {
  eur: String
  usd: String
  eur_foil: String
  usd_foil: String
}

type Legalities {
  standard: String
  modern: String
  commander: String
}

type CardFace {
  name: String!
  image_uris: ImageUris
  colors: [String]
}

type ImageUris {
  small: String
  normal: String
  art_crop: String
}

type CachedCard {
  i: String!
  n: String!
  o: String!
  k: String
}

type PaginatedCards {
  hasMore: Boolean!
  nextOffset: Int
  totalResults: Int!
  cards: [Card!]!
}

enum Currency {
  Usd
  UsdFoil
  Eur
  EurFoil
}

type PriceDevelopment {
  date: String!
  price: Float
}


input CardsOptionsInput {
  name: String
  colors: String
  subTypes: [String!]
  cardTypes: [String!]
  tags: [String!]
  isLegendary: String
  isGameChanger: String
  isCommanderLegal: String
  isOwned: String
  text: String
  cmc: String
  rarity: String
  power: String
  toughness: String
  sets: [String!]
  orderBy: String
  variants: [String]
  displayAllVariants: Boolean
  scryfallTags: [String!]
}

################################# Deck #################################

type Deck {
  id: String!
  name: String!
  createdAt: String!
  lastEdit: String!
  imgSrc: String!
  numberOfCards: Int!
  visibility: Visibility!
  status: DeckStatus!
  canEdit: Boolean!
  cards: [DeckCard!]!
  colors: [String!]
  wantsLists: [WantsList!]!
}

type DeckCard {
  id: String!
  amount: Int!
  createdAt: String!
  isCommander: Boolean
  isDefault: Boolean
  card: Card!
  tags: [String!]
}

################################# Land Suggestion #################################

input LandsSuggestionInput {
  numberOfLands: Int
  ownedLandsOnly: Boolean
  minNumberOfBasics: Int
}

type LandsSuggestionCard {
  id: String!
  name: String!
  amount: Int
  selected: Boolean
  owned: Boolean
  gameChanger: Boolean
}

type LandsSuggestionGroup {
  name: String!
  id: String!
  lands: [LandsSuggestionCard!]!
}

type LandsSuggestionResponse {
  groups: [LandsSuggestionGroup!]!
}

################################# Collection #################################

type Collection {
  id: String!
  visibility: Visibility!
  referenceSnapshot: CollectionSnapshot
  currentSnapshot: CollectionSnapshot!
}

type PaginatedCollection {
  hasMore: Boolean!
  nextOffset: Int
  search: String
  totalResults: Int!
  cards: [CollectionCard!]!
}

type CollectionCard {
  id: String!
  createdAt: String!
  card: Card!
}

################################# User #################################

type User {
  id: String!
  name: String!
  avatar: String!
  email: String!
  username: String
  featureFlags: [String]
  openFriendRequests: Int!
}

type Friend {
  id: String!
  username: String!
  avatar: String
  canAccept: Boolean
  canWithdraw: Boolean
}

type UserPage {
  username: String!
  userId: String!
  decks: [Deck!]!
  wantsLists: [WantsList!]!
  isCollectionPublic: Boolean!
  canSendFriendRequest: Boolean!
}

################################# Wants #################################

type WantsList {
  id: String!
  name: String!
  lastEdit: String!
  createdAt: String!
  numberOfCards: Int!
  deck: Deck
  canEdit: Boolean!
  visibility: Visibility!
  cardPreviews: [String!]
  cards: [WantsListCard!]!
}

type WantsListCard {
  id: String!
  createdAt: String!
  amount: Int!
  card: Card!
}

################################# Collection Snapshot #################################

type CollectionSnapshot {
  date: String!
  value: Int
  valueEur: Int
  amount: Int
  amountUniqueVersions: Int
  amountUnique: Int
  missingPriceEur: Int
}

################################# Proxy #################################

type ProxyCard {
  id: String!
  amount: Int
  name: String!
  imgKey: String!
  isTwoFaced: Boolean!
}

type Token {
  id: String!
  name: String!
  imgKey: String!
  isTwoFaced: Boolean!
}

################################# AllLists #################################

type AllLists {
  decks: [Deck!]!
  wantsLists: [WantsList!]!
}

################################# WantedCards #################################

type WantedCards {
  decks: [WantedCardsList]!
  wantsLists: [WantedCardsList]!
}

type WantedCardsList {
  id: String!
  name: String!
  imgSrc: String
  cards: [WantedCard!]!
}

type WantedCard {
  id: String!
  name: String!
  imgKey: String!
  oracle_id: String!
}

################################# Life Tracker #################################

type LTPlayer {
  name: String!
  img: String
  color: String
  lastEdit: String
}

################################# EDHRec #################################

type EDHRecData {
  themes: [EDHRecTheme!]!
  cardLists: [EDHRecCategory!]!
}

type EDHRecTheme {
  title: String!
  urlSuffix: String!
  count: Int!
}

type EDHRecCategory {
  cards: [Card!]
  title: String!
  key: String!
}

################################# Sets #################################

type Set {
  code: String!
  name: String!
  released_at: String!
  set_type: String!
  icon_svg_uri: String!
  card_count: Int!

  uniqueCardCount: Int!

  totalCardsOwned: Int!
  uniqueVersionsOwned: Int!
  uniqueCardsOwned: Int!
  percentageOwned: Float!
}

################################# Queries #################################

type Query {
  user: User

  deck(id: String!): Deck
  decks: [Deck!]!
  landsSuggestion(deckId: String! options: LandsSuggestionInput): LandsSuggestionResponse!

  collection: Collection!
  paginatedCollection(
    limit: Int!
    offset: Int!
    orderBy: String!
    search: String
    username: String
    addedWithin: Int
  ): PaginatedCollection!
  ownedCardNames: [String!]!
  collectionSnapshots: [CollectionSnapshot!]!
  collectionBySet: [Set!]!

  publicCollection(username: String!): [CollectionCard!]
  wantedCards(username: String!): WantedCards

  card(id: String!): Card!
  cards(cardIds: [String]!): [Card]!
  cardImages(cardId: String!): [String]!
  cardSearch(
    offset: Int
    limit: Int
    options: CardsOptionsInput!
  ): PaginatedCards!
  cardByOracleId(oracle_id: String!): Card
  priceDevelopment(cardId: String!, currency: Currency!): [PriceDevelopment!]!

  cardsBySet(setKey: String!): [Card!]!
  numberOfCachedCards: Int!
  cachedCards: [CachedCard!]!

  wantsList(id: String!): WantsList!
  wantsLists(deckId: String): [WantsList!]!

  proxies(type: String!, value: String, filter: String): [ProxyCard!]!
  tokens: [Token!]!
  allLists: AllLists!

  tokenFinder: [Card!]!

  ltPlayers: [LTPlayer!]

  edhrecCards(names: [String!]!, themeSuffix: String): EDHRecData

  cardVariants: [String!]!
  scryfallTags: [ScryfallTag!]!

  friends: [Friend]!
  searchUsers(search: String!): [Friend!]
  userPage(username: String!): UserPage!

  landCycleFavorites: [String!]!
}

################################# Mutations #################################

type Mutation {
  ########## User ##########
  setUsername(username: String!): User!
  ########## Deck ##########
  createDeck: Deck!
  addCardsToDeck(
    deckId: String!
    deckName: String
    cards: [CardInputType!]!
  ): Deck!

  editDeck(deckId: String!, newProperties: EditDeckFieldsInput!): Deck!
  editDeckCard(
    cardId: String!
    deckId: String!
    newProps: EditDeckCardInput!
  ): DeckCard!
  setCommander(cardIds: [String!]!, deckId: String!): Deck!
  deleteDeck(deckId: String!): Boolean
  deleteFromDeck(cardId: String, cardIds: [String], deckId: String!): Deck!
  duplicateDeck(deckId: String!): String!
  changeDeckVisibility(deckId: String!, visibility: Visibility!): Deck!
  changeDeckStatus(deckId: String!, status: DeckStatus!): Deck!
  setLandsForDeck(deckId: String!, lands: [LandInput!]!): Deck!

  addTagsToCards(
    deckId: String!
    tags: [String!]!
    cardIds: [String!]!
  ): [DeckCard!]!

  moveCard(
    cardId: String!
    from: MoveCardInputType!
    to: MoveCardInputType!
  ): MoveCardReturnType!

  ########## Collection ##########
  addToCollection(cards: [CardInputType]!): [CollectionCard!]!
  changeCollection(
    cardOracleId: String!
    added: [ChangeCollectionInput!]
    edited: [ChangeCollectionInput!]
    deleted: [String!]
    cardId: String
  ): CollectionCard
  deleteFromCollection(cardIds: [String]!): Boolean
  deleteAllFromCollection(oracleIds: [String!]!): Boolean

  changeCollectionVisibility(visibility: Visibility!): Collection!

  ########## Session ##########
  login(token: String!): LoginResponse!
  logout(sessionId: String!): Boolean

  ########## Friends ##########
  sendFriendRequest(userId: String!): Boolean!
  acceptFriendRequest(userId: String!): Boolean!
  removeFriend(userId: String!): Boolean

  ########## Wants ##########
  createWantsList(deckId: String): WantsList!
  editWantsList(
    wantsListId: String!
    newProperties: EditWantsListFieldsInput!
  ): WantsList!
  editWantsListCard(
    cardId: String!
    wantsListId: String!
    newProps: EditWantsListCardInput!
  ): WantsListCard!
  deleteFromWantsList(oracleIds: [String!]!, wantsListId: String!): WantsList!
  deleteWantsList(wantsListId: String!): Boolean!
  duplicateWantsList(wantsListId: String!): WantsList!
  addCardsToWantsList(
    wantsListId: String!
    wantsListName: String
    cards: [CardInputType!]!
  ): [WantsListCard!]!
  linkWantsList(wantsListId: String!, deckId: String!): WantsList!
  unlinkWantsList(wantsListId: String!): WantsList!
  changeWantsListVisibility(
    wantsListId: String!
    visibility: Visibility!
  ): WantsList!

  ########## Life Tracker ##########
  updateLtPlayer(name: String!, img: String, color: String): LTPlayer!
  deleteLtPlayer(name: String!): Boolean

  ########## Default tags ##########
  setDefaultTags(tags: [String!]!, oracleId: String!): Boolean

  ########## Card Update ##########
  updateCardImages(cardId: String!): Boolean

  ########## Land Cycle Favorites ##########
  addLandCycleFavorite(landCycleId: String!): Boolean!
  removeLandCycleFavorite(landCycleId: String!): Boolean!
}

################################# Move Card #################################
enum MoveToNameType {
  DECK
  WANTS_LIST
}

input MoveCardInputType {
  id: String!
  type: MoveToNameType!
}

union MoveCardListType = WantsList | Deck

type MoveCardReturnType {
  from: MoveCardListType!
  to: MoveCardListType!
}

################################# Deck #################################

input EditDeckFieldsInput {
  name: String
  imgSrc: String
}

input LandInput {
  id: String!
  amount: Int!
}

input CardInputType {
  id: String!
  amount: Int
  isFoil: Boolean
}

input EditDeckCardInput {
  id: String
  amount: Int
  isCommander: Boolean
  isDefault: Boolean
  tags: [String!]
}

################################# Collection #################################

input ChangeCollectionInput {
  id: String!
  amountOwned: Int
  amountOwnedFoil: Int
}

################################# Session #################################

type LoginResponse {
  session: String!
  user: User!
}

################################# Wants List #################################

input EditWantsListFieldsInput {
  name: String
}
input EditWantsListCardInput {
  id: String
  amount: Int
}
